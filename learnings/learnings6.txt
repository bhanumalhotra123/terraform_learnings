terraform apply is the combination of terraform plan and the changes


PS C:\Users\HP\Desktop\terraform_learnings\learnings> terraform apply

Terraform used the selected providers to generate the following       
execution plan. Resource actions are indicated with the following     
symbols:
  + create

Terraform will perform the following actions:

  # aws_instance.nginx will be created
  + resource "aws_instance" "nginx" {
      + ami                                  = "ami-0f409bae3775dc8e5"
      + arn                                  = (known after apply)    
      + associate_public_ip_address          = (known after apply)    
      + availability_zone                    = (known after apply)    
      + cpu_core_count                       = (known after apply)    
      + cpu_threads_per_core                 = (known after apply)    
      + disable_api_stop                     = (known after apply)    
      + disable_api_termination              = (known after apply)    
      + ebs_optimized                        = (known after apply)    
      + get_password_data                    = false
      + host_id                              = (known after apply)    
      + host_resource_group_arn              = (known after apply)    
      + iam_instance_profile                 = (known after apply)    
      + id                                   = (known after apply)    
      + instance_initiated_shutdown_behavior = (known after apply)    
      + instance_lifecycle                   = (known after apply)    
      + instance_state                       = (known after apply)    
      + instance_type                        = "t2.micro"
      + ipv6_address_count                   = (known after apply)    
      + ipv6_addresses                       = (known after apply)    
      + key_name                             = (known after apply)    
      + monitoring                           = (known after apply)    
      + outpost_arn                          = (known after apply)    
      + password_data                        = (known after apply)    
      + placement_group                      = (known after apply)    
      + placement_partition_number           = (known after apply)    
      + primary_network_interface_id         = (known after apply)    
      + private_dns                          = (known after apply)    
      + private_ip                           = (known after apply)    
      + public_dns                           = (known after apply)    
      + public_ip                            = (known after apply)    
      + secondary_private_ips                = (known after apply)    
      + security_groups                      = (known after apply)    
      + source_dest_check                    = true
      + spot_instance_request_id             = (known after apply)    
      + subnet_id                            = (known after apply)    
      + tags_all                             = (known after apply)    
      + tenancy                              = (known after apply)    
      + user_data                            = (known after apply)    
      + user_data_base64                     = (known after apply)    
      + user_data_replace_on_change          = false
      + vpc_security_group_ids               = (known after apply)    
    }


Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value: yes

aws_instance.nginx: Creating...
aws_instance.nginx: Still creating... [10s elapsed]
aws_instance.nginx: Still creating... [20s elapsed]
aws_instance.nginx: Still creating... [30s elapsed]
aws_instance.nginx: Creation complete after 38s [id=i-0381df5366b53985a]

Apply complete! Resources: 1 added, 0 changed, 0 destroyed.



Now i changed the t2.micro to t2.medium and did terraform apply again.



Terraform used the selected providers to generate the following       
execution plan. Resource actions are indicated with the following     
symbols:
  + create

Terraform will perform the following actions:

  # aws_instance.nginx will be created
  + resource "aws_instance" "nginx" {
      + ami                                  = "ami-0f409bae3775dc8e5"
      + arn                                  = (known after apply)    
      + associate_public_ip_address          = (known after apply)    
      + availability_zone                    = (known after apply)    
      + cpu_core_count                       = (known after apply)    
      + cpu_threads_per_core                 = (known after apply)    
      + disable_api_stop                     = (known after apply)    
      + disable_api_termination              = (known after apply)    
      + ebs_optimized                        = (known after apply)    
      + get_password_data                    = false
      + host_id                              = (known after apply)    
      + host_resource_group_arn              = (known after apply)    
      + iam_instance_profile                 = (known after apply)    
      + id                                   = (known after apply)    
      + instance_initiated_shutdown_behavior = (known after apply)    
      + instance_lifecycle                   = (known after apply)    
      + instance_state                       = (known after apply)    
      + instance_type                        = "t2.micro"
      + ipv6_address_count                   = (known after apply)    
      + ipv6_addresses                       = (known after apply)    
      + key_name                             = (known after apply)    
      + monitoring                           = (known after apply)    
      + outpost_arn                          = (known after apply)    
      + password_data                        = (known after apply)    
      + placement_group                      = (known after apply)    
      + placement_partition_number           = (known after apply)    
      + primary_network_interface_id         = (known after apply)    
      + private_dns                          = (known after apply)    
      + private_ip                           = (known after apply)    
      + public_dns                           = (known after apply)    
      + public_ip                            = (known after apply)    
      + secondary_private_ips                = (known after apply)    
      + security_groups                      = (known after apply)    
      + source_dest_check                    = true
      + spot_instance_request_id             = (known after apply)    
      + subnet_id                            = (known after apply)    
      + tags_all                             = (known after apply)    
      + tenancy                              = (known after apply)    
      + user_data                            = (known after apply)    
      + user_data_base64                     = (known after apply)    
      + user_data_replace_on_change          = false
      + vpc_security_group_ids               = (known after apply)    
    }


Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value: yes

aws_instance.nginx: Creating...
aws_instance.nginx: Still creating... [10s elapsed]
aws_instance.nginx: Still creating... [20s elapsed]
aws_instance.nginx: Still creating... [30s elapsed]
aws_instance.nginx: Creation complete after 38s [id=i-0381df5366b53985a]

Apply complete! Resources: 1 added, 0 changed, 0 destroyed.
PS C:\Users\HP\Desktop\terraform_learnings\learnings> terraform plan                 
aws_instance.nginx: Refreshing state... [id=i-0381df5366b53985a]

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the
following symbols:
  ~ update in-place

Terraform will perform the following actions:

  # aws_instance.nginx will be updated in-place
  ~ resource "aws_instance" "nginx" {
        id                                   = "i-0381df5366b53985a"
      ~ instance_type                        = "t2.micro" -> "t2.medium"
        tags                                 = {}
        # (30 unchanged attributes hidden)

        # (8 unchanged blocks hidden)
    }

Plan: 0 to add, 1 to change, 0 to destroy.

────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────

Note: You didn't use the -out option to save this plan, so Terraform can't guarantee to take exactly these actions if you run
"terraform apply" now.
PS C:\Users\HP\Desktop\terraform_learnings\learnings> terraform apply
aws_instance.nginx: Refreshing state... [id=i-0381df5366b53985a]

Terraform used the selected providers to generate the following       
execution plan. Resource actions are indicated with the following     
symbols:
  ~ update in-place

Terraform will perform the following actions:

  # aws_instance.nginx will be updated in-place
  ~ resource "aws_instance" "nginx" {
        id                                   = "i-0381df5366b53985a"  
      ~ instance_type                        = "t2.micro" -> "t2.medium"
        tags                                 = {}
        # (30 unchanged attributes hidden)

        # (8 unchanged blocks hidden)
    }

Plan: 0 to add, 1 to change, 0 to destroy.

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value: yes

aws_instance.nginx: Modifying... [id=i-0381df5366b53985a]
aws_instance.nginx: Still modifying... [id=i-0381df5366b53985a, 10s elapsed]
aws_instance.nginx: Still modifying... [id=i-0381df5366b53985a, 20s elapsed]
aws_instance.nginx: Still modifying... [id=i-0381df5366b53985a, 30s elapsed]
aws_instance.nginx: Still modifying... [id=i-0381df5366b53985a, 40s elapsed]
aws_instance.nginx: Still modifying... [id=i-0381df5366b53985a, 50s elapsed]
aws_instance.nginx: Modifications complete after 57s [id=i-0381df5366b53985a]

Apply complete! Resources: 0 added, 1 changed, 0 destroyed.


It shows modified but actually it stops the instances and restarts the another with t2.medium.
That is the only way possible for aws instances.

In earlier versions of terraform if you change the configuration it would stop the instance -> delete the instance -> create a new instance
now with newer versions it stops the instance --> changes the configuration(t2.micro -> t2.medium) --> starts the instance
